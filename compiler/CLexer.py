# Generated from C.g4 by ANTLR 4.7.2
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\62")
        buf.write("\u0168\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\3\2")
        buf.write("\3\2\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\4\3\4\3\4\3\4\3\4\3")
        buf.write("\5\3\5\3\6\3\6\3\7\3\7\3\b\3\b\3\t\3\t\3\n\3\n\3\13\3")
        buf.write("\13\3\f\3\f\3\r\3\r\3\16\3\16\3\16\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\20\3\20\3\20\3\20\3\20\3\20\3\21\3\21\3\21\3\21")
        buf.write("\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\23\3\23")
        buf.write("\3\23\3\23\3\23\3\23\3\24\3\24\3\24\3\24\3\24\3\24\3\24")
        buf.write("\3\25\3\25\3\26\3\26\3\27\3\27\3\27\3\30\3\30\3\30\3\31")
        buf.write("\3\31\3\32\3\32\3\33\3\33\3\34\3\34\3\35\3\35\3\36\3\36")
        buf.write("\3\36\3\37\3\37\3 \3 \3 \3!\3!\3!\3\"\3\"\3\"\3#\3#\3")
        buf.write("#\3$\3$\3$\3%\3%\3%\3%\3&\3&\3&\3&\3&\3&\3\'\3\'\3(\3")
        buf.write("(\3(\3(\3(\3(\3(\3)\3)\7)\u00ed\n)\f)\16)\u00f0\13)\3")
        buf.write("*\3*\7*\u00f4\n*\f*\16*\u00f7\13*\3+\6+\u00fa\n+\r+\16")
        buf.write("+\u00fb\3,\3,\5,\u0100\n,\3,\3,\3,\3,\3,\5,\u0107\n,\3")
        buf.write("-\6-\u010a\n-\r-\16-\u010b\3.\3.\3.\3.\3.\3.\3.\3.\5.")
        buf.write("\u0116\n.\3/\6/\u0119\n/\r/\16/\u011a\3/\3/\3\60\3\60")
        buf.write("\5\60\u0121\n\60\3\60\5\60\u0124\n\60\3\60\3\60\3\61\3")
        buf.write("\61\3\61\3\61\7\61\u012c\n\61\f\61\16\61\u012f\13\61\3")
        buf.write("\61\3\61\3\61\3\61\3\61\3\62\3\62\3\62\3\62\7\62\u013a")
        buf.write("\n\62\f\62\16\62\u013d\13\62\3\62\3\62\3\63\3\63\5\63")
        buf.write("\u0143\n\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3")
        buf.write("\63\5\63\u014e\n\63\3\63\3\63\7\63\u0152\n\63\f\63\16")
        buf.write("\63\u0155\13\63\3\63\3\63\3\63\7\63\u015a\n\63\f\63\16")
        buf.write("\63\u015d\13\63\3\63\5\63\u0160\n\63\3\63\5\63\u0163\n")
        buf.write("\63\3\63\3\63\3\63\3\63\3\u012d\2\64\3\3\5\4\7\5\t\6\13")
        buf.write("\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37")
        buf.write("\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33\65\34")
        buf.write("\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y\2[\2]._")
        buf.write("/a\60c\61e\62\3\2\n\5\2C\\aac|\6\2\62;C\\aac|\3\2\63;")
        buf.write("\3\2\62;\6\2\f\f\17\17$$^^\r\2$$))\62\62AA^^cdhhppttv")
        buf.write("vxx\4\2\13\13\"\"\4\2\f\f\17\17\2\u0179\2\3\3\2\2\2\2")
        buf.write("\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3")
        buf.write("\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2")
        buf.write("\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2")
        buf.write("\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3")
        buf.write("\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61")
        buf.write("\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2")
        buf.write("\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3")
        buf.write("\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M")
        buf.write("\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2")
        buf.write("W\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2\2a\3\2\2\2\2c\3\2\2\2")
        buf.write("\2e\3\2\2\2\3g\3\2\2\2\5k\3\2\2\2\7p\3\2\2\2\tu\3\2\2")
        buf.write("\2\13w\3\2\2\2\ry\3\2\2\2\17{\3\2\2\2\21}\3\2\2\2\23\177")
        buf.write("\3\2\2\2\25\u0081\3\2\2\2\27\u0083\3\2\2\2\31\u0085\3")
        buf.write("\2\2\2\33\u0087\3\2\2\2\35\u008a\3\2\2\2\37\u008f\3\2")
        buf.write("\2\2!\u0095\3\2\2\2#\u0099\3\2\2\2%\u00a2\3\2\2\2\'\u00a8")
        buf.write("\3\2\2\2)\u00af\3\2\2\2+\u00b1\3\2\2\2-\u00b3\3\2\2\2")
        buf.write("/\u00b6\3\2\2\2\61\u00b9\3\2\2\2\63\u00bb\3\2\2\2\65\u00bd")
        buf.write("\3\2\2\2\67\u00bf\3\2\2\29\u00c1\3\2\2\2;\u00c3\3\2\2")
        buf.write("\2=\u00c6\3\2\2\2?\u00c8\3\2\2\2A\u00cb\3\2\2\2C\u00ce")
        buf.write("\3\2\2\2E\u00d1\3\2\2\2G\u00d4\3\2\2\2I\u00d7\3\2\2\2")
        buf.write("K\u00db\3\2\2\2M\u00e1\3\2\2\2O\u00e3\3\2\2\2Q\u00ea\3")
        buf.write("\2\2\2S\u00f1\3\2\2\2U\u00f9\3\2\2\2W\u0106\3\2\2\2Y\u0109")
        buf.write("\3\2\2\2[\u0115\3\2\2\2]\u0118\3\2\2\2_\u0123\3\2\2\2")
        buf.write("a\u0127\3\2\2\2c\u0135\3\2\2\2e\u0140\3\2\2\2gh\7k\2\2")
        buf.write("hi\7p\2\2ij\7v\2\2j\4\3\2\2\2kl\7x\2\2lm\7q\2\2mn\7k\2")
        buf.write("\2no\7f\2\2o\6\3\2\2\2pq\7e\2\2qr\7j\2\2rs\7c\2\2st\7")
        buf.write("t\2\2t\b\3\2\2\2uv\7}\2\2v\n\3\2\2\2wx\7\177\2\2x\f\3")
        buf.write("\2\2\2yz\7.\2\2z\16\3\2\2\2{|\7=\2\2|\20\3\2\2\2}~\7<")
        buf.write("\2\2~\22\3\2\2\2\177\u0080\7]\2\2\u0080\24\3\2\2\2\u0081")
        buf.write("\u0082\7_\2\2\u0082\26\3\2\2\2\u0083\u0084\7*\2\2\u0084")
        buf.write("\30\3\2\2\2\u0085\u0086\7+\2\2\u0086\32\3\2\2\2\u0087")
        buf.write("\u0088\7k\2\2\u0088\u0089\7h\2\2\u0089\34\3\2\2\2\u008a")
        buf.write("\u008b\7g\2\2\u008b\u008c\7n\2\2\u008c\u008d\7u\2\2\u008d")
        buf.write("\u008e\7g\2\2\u008e\36\3\2\2\2\u008f\u0090\7y\2\2\u0090")
        buf.write("\u0091\7j\2\2\u0091\u0092\7k\2\2\u0092\u0093\7n\2\2\u0093")
        buf.write("\u0094\7g\2\2\u0094 \3\2\2\2\u0095\u0096\7h\2\2\u0096")
        buf.write("\u0097\7q\2\2\u0097\u0098\7t\2\2\u0098\"\3\2\2\2\u0099")
        buf.write("\u009a\7e\2\2\u009a\u009b\7q\2\2\u009b\u009c\7p\2\2\u009c")
        buf.write("\u009d\7v\2\2\u009d\u009e\7k\2\2\u009e\u009f\7p\2\2\u009f")
        buf.write("\u00a0\7w\2\2\u00a0\u00a1\7g\2\2\u00a1$\3\2\2\2\u00a2")
        buf.write("\u00a3\7d\2\2\u00a3\u00a4\7t\2\2\u00a4\u00a5\7g\2\2\u00a5")
        buf.write("\u00a6\7c\2\2\u00a6\u00a7\7m\2\2\u00a7&\3\2\2\2\u00a8")
        buf.write("\u00a9\7t\2\2\u00a9\u00aa\7g\2\2\u00aa\u00ab\7v\2\2\u00ab")
        buf.write("\u00ac\7w\2\2\u00ac\u00ad\7t\2\2\u00ad\u00ae\7p\2\2\u00ae")
        buf.write("(\3\2\2\2\u00af\u00b0\7?\2\2\u00b0*\3\2\2\2\u00b1\u00b2")
        buf.write("\7\60\2\2\u00b2,\3\2\2\2\u00b3\u00b4\7-\2\2\u00b4\u00b5")
        buf.write("\7-\2\2\u00b5.\3\2\2\2\u00b6\u00b7\7/\2\2\u00b7\u00b8")
        buf.write("\7/\2\2\u00b8\60\3\2\2\2\u00b9\u00ba\7\61\2\2\u00ba\62")
        buf.write("\3\2\2\2\u00bb\u00bc\7\'\2\2\u00bc\64\3\2\2\2\u00bd\u00be")
        buf.write("\7-\2\2\u00be\66\3\2\2\2\u00bf\u00c0\7/\2\2\u00c08\3\2")
        buf.write("\2\2\u00c1\u00c2\7>\2\2\u00c2:\3\2\2\2\u00c3\u00c4\7>")
        buf.write("\2\2\u00c4\u00c5\7?\2\2\u00c5<\3\2\2\2\u00c6\u00c7\7@")
        buf.write("\2\2\u00c7>\3\2\2\2\u00c8\u00c9\7@\2\2\u00c9\u00ca\7?")
        buf.write("\2\2\u00ca@\3\2\2\2\u00cb\u00cc\7?\2\2\u00cc\u00cd\7?")
        buf.write("\2\2\u00cdB\3\2\2\2\u00ce\u00cf\7#\2\2\u00cf\u00d0\7?")
        buf.write("\2\2\u00d0D\3\2\2\2\u00d1\u00d2\7(\2\2\u00d2\u00d3\7(")
        buf.write("\2\2\u00d3F\3\2\2\2\u00d4\u00d5\7~\2\2\u00d5\u00d6\7~")
        buf.write("\2\2\u00d6H\3\2\2\2\u00d7\u00d8\7\60\2\2\u00d8\u00d9\7")
        buf.write("\60\2\2\u00d9\u00da\7\60\2\2\u00daJ\3\2\2\2\u00db\u00dc")
        buf.write("\7e\2\2\u00dc\u00dd\7q\2\2\u00dd\u00de\7p\2\2\u00de\u00df")
        buf.write("\7u\2\2\u00df\u00e0\7v\2\2\u00e0L\3\2\2\2\u00e1\u00e2")
        buf.write("\7,\2\2\u00e2N\3\2\2\2\u00e3\u00e4\7u\2\2\u00e4\u00e5")
        buf.write("\7v\2\2\u00e5\u00e6\7t\2\2\u00e6\u00e7\7w\2\2\u00e7\u00e8")
        buf.write("\7e\2\2\u00e8\u00e9\7v\2\2\u00e9P\3\2\2\2\u00ea\u00ee")
        buf.write("\t\2\2\2\u00eb\u00ed\t\3\2\2\u00ec\u00eb\3\2\2\2\u00ed")
        buf.write("\u00f0\3\2\2\2\u00ee\u00ec\3\2\2\2\u00ee\u00ef\3\2\2\2")
        buf.write("\u00efR\3\2\2\2\u00f0\u00ee\3\2\2\2\u00f1\u00f5\t\4\2")
        buf.write("\2\u00f2\u00f4\t\5\2\2\u00f3\u00f2\3\2\2\2\u00f4\u00f7")
        buf.write("\3\2\2\2\u00f5\u00f3\3\2\2\2\u00f5\u00f6\3\2\2\2\u00f6")
        buf.write("T\3\2\2\2\u00f7\u00f5\3\2\2\2\u00f8\u00fa\t\5\2\2\u00f9")
        buf.write("\u00f8\3\2\2\2\u00fa\u00fb\3\2\2\2\u00fb\u00f9\3\2\2\2")
        buf.write("\u00fb\u00fc\3\2\2\2\u00fcV\3\2\2\2\u00fd\u00ff\7$\2\2")
        buf.write("\u00fe\u0100\5Y-\2\u00ff\u00fe\3\2\2\2\u00ff\u0100\3\2")
        buf.write("\2\2\u0100\u0101\3\2\2\2\u0101\u0107\7$\2\2\u0102\u0103")
        buf.write("\7)\2\2\u0103\u0104\5[.\2\u0104\u0105\7)\2\2\u0105\u0107")
        buf.write("\3\2\2\2\u0106\u00fd\3\2\2\2\u0106\u0102\3\2\2\2\u0107")
        buf.write("X\3\2\2\2\u0108\u010a\5[.\2\u0109\u0108\3\2\2\2\u010a")
        buf.write("\u010b\3\2\2\2\u010b\u0109\3\2\2\2\u010b\u010c\3\2\2\2")
        buf.write("\u010cZ\3\2\2\2\u010d\u0116\n\6\2\2\u010e\u010f\7^\2\2")
        buf.write("\u010f\u0116\t\7\2\2\u0110\u0111\7^\2\2\u0111\u0116\7")
        buf.write("\f\2\2\u0112\u0113\7^\2\2\u0113\u0114\7\17\2\2\u0114\u0116")
        buf.write("\7\f\2\2\u0115\u010d\3\2\2\2\u0115\u010e\3\2\2\2\u0115")
        buf.write("\u0110\3\2\2\2\u0115\u0112\3\2\2\2\u0116\\\3\2\2\2\u0117")
        buf.write("\u0119\t\b\2\2\u0118\u0117\3\2\2\2\u0119\u011a\3\2\2\2")
        buf.write("\u011a\u0118\3\2\2\2\u011a\u011b\3\2\2\2\u011b\u011c\3")
        buf.write("\2\2\2\u011c\u011d\b/\2\2\u011d^\3\2\2\2\u011e\u0120\7")
        buf.write("\17\2\2\u011f\u0121\7\f\2\2\u0120\u011f\3\2\2\2\u0120")
        buf.write("\u0121\3\2\2\2\u0121\u0124\3\2\2\2\u0122\u0124\7\f\2\2")
        buf.write("\u0123\u011e\3\2\2\2\u0123\u0122\3\2\2\2\u0124\u0125\3")
        buf.write("\2\2\2\u0125\u0126\b\60\2\2\u0126`\3\2\2\2\u0127\u0128")
        buf.write("\7\61\2\2\u0128\u0129\7,\2\2\u0129\u012d\3\2\2\2\u012a")
        buf.write("\u012c\13\2\2\2\u012b\u012a\3\2\2\2\u012c\u012f\3\2\2")
        buf.write("\2\u012d\u012e\3\2\2\2\u012d\u012b\3\2\2\2\u012e\u0130")
        buf.write("\3\2\2\2\u012f\u012d\3\2\2\2\u0130\u0131\7,\2\2\u0131")
        buf.write("\u0132\7\61\2\2\u0132\u0133\3\2\2\2\u0133\u0134\b\61\2")
        buf.write("\2\u0134b\3\2\2\2\u0135\u0136\7\61\2\2\u0136\u0137\7\61")
        buf.write("\2\2\u0137\u013b\3\2\2\2\u0138\u013a\n\t\2\2\u0139\u0138")
        buf.write("\3\2\2\2\u013a\u013d\3\2\2\2\u013b\u0139\3\2\2\2\u013b")
        buf.write("\u013c\3\2\2\2\u013c\u013e\3\2\2\2\u013d\u013b\3\2\2\2")
        buf.write("\u013e\u013f\b\62\2\2\u013fd\3\2\2\2\u0140\u0142\7%\2")
        buf.write("\2\u0141\u0143\5]/\2\u0142\u0141\3\2\2\2\u0142\u0143\3")
        buf.write("\2\2\2\u0143\u0144\3\2\2\2\u0144\u0145\7k\2\2\u0145\u0146")
        buf.write("\7p\2\2\u0146\u0147\7e\2\2\u0147\u0148\7n\2\2\u0148\u0149")
        buf.write("\7w\2\2\u0149\u014a\7f\2\2\u014a\u014b\7g\2\2\u014b\u014d")
        buf.write("\3\2\2\2\u014c\u014e\5]/\2\u014d\u014c\3\2\2\2\u014d\u014e")
        buf.write("\3\2\2\2\u014e\u015f\3\2\2\2\u014f\u0153\7$\2\2\u0150")
        buf.write("\u0152\n\t\2\2\u0151\u0150\3\2\2\2\u0152\u0155\3\2\2\2")
        buf.write("\u0153\u0151\3\2\2\2\u0153\u0154\3\2\2\2\u0154\u0156\3")
        buf.write("\2\2\2\u0155\u0153\3\2\2\2\u0156\u0160\7$\2\2\u0157\u015b")
        buf.write("\7>\2\2\u0158\u015a\n\t\2\2\u0159\u0158\3\2\2\2\u015a")
        buf.write("\u015d\3\2\2\2\u015b\u0159\3\2\2\2\u015b\u015c\3\2\2\2")
        buf.write("\u015c\u015e\3\2\2\2\u015d\u015b\3\2\2\2\u015e\u0160\7")
        buf.write("@\2\2\u015f\u014f\3\2\2\2\u015f\u0157\3\2\2\2\u0160\u0162")
        buf.write("\3\2\2\2\u0161\u0163\5]/\2\u0162\u0161\3\2\2\2\u0162\u0163")
        buf.write("\3\2\2\2\u0163\u0164\3\2\2\2\u0164\u0165\5_\60\2\u0165")
        buf.write("\u0166\3\2\2\2\u0166\u0167\b\63\2\2\u0167f\3\2\2\2\26")
        buf.write("\2\u00ec\u00ee\u00f5\u00fb\u00ff\u0106\u010b\u0115\u011a")
        buf.write("\u0120\u0123\u012d\u013b\u0142\u014d\u0153\u015b\u015f")
        buf.write("\u0162\3\b\2\2")
        return buf.getvalue()


class CLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    CONST = 37
    POINTER = 38
    STRUCT = 39
    Identifier = 40
    Constant = 41
    DigitSequence = 42
    StringLiteral = 43
    Whitespace = 44
    Newline = 45
    BlockComment = 46
    LineComment = 47
    IncludeDirective = 48

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'int'", "'void'", "'char'", "'{'", "'}'", "','", "';'", "':'", 
            "'['", "']'", "'('", "')'", "'if'", "'else'", "'while'", "'for'", 
            "'continue'", "'break'", "'return'", "'='", "'.'", "'++'", "'--'", 
            "'/'", "'%'", "'+'", "'-'", "'<'", "'<='", "'>'", "'>='", "'=='", 
            "'!='", "'&&'", "'||'", "'...'", "'const'", "'*'", "'struct'" ]

    symbolicNames = [ "<INVALID>",
            "CONST", "POINTER", "STRUCT", "Identifier", "Constant", "DigitSequence", 
            "StringLiteral", "Whitespace", "Newline", "BlockComment", "LineComment", 
            "IncludeDirective" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "CONST", "POINTER", 
                  "STRUCT", "Identifier", "Constant", "DigitSequence", "StringLiteral", 
                  "SCharSequence", "SChar", "Whitespace", "Newline", "BlockComment", 
                  "LineComment", "IncludeDirective" ]

    grammarFileName = "C.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


